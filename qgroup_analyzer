#!/bin/bash

savedir="save"

[[ ! -e save || ! -e save/groups ]] && echo "no saved data. Do qgroup_info_dump first." && exit 1

# _get_name_from_group: fetch user's name from group (internal)
# param:  $1: group
#         $2: uin
#         $3: boolean, true: print card name if possible, nick name otherwise, false: always print nick name.
# return: group card name if exist, nickname otherwise, empty if that member is not in group.
function _get_name_from_group () {

	[[ -z $3 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	jq 'foreach .mems [] as $item (.; 
		if $item .uin == '$2' 
			then if $item .card != "" and '$3' 
				then $item .card 
				else $item .nick 
			end 
			else empty 
		end
	)' < $savedir/groups/$1.json | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
}

# _get_uin_from_group: fetch user's uin from group (internal)
# param:  $1: group
#         $2: uin
# return: list of uins if exist, empty otherwise.
function _get_uin_from_group () {
	
	[[ -z $2 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2
	
	jq 'foreach .mems [] as $item (.; 
		if $item .card == "'$2'" or $item .nick == "'$2'"
			then $item .uin
			else empty
		end
	)' < $savedir/groups/$1.json
	
}

# _if_in_group: check if given uin/username is in a group (internal)
# param:  $1: group 
#         $2: username/uin
#         $3: boolean, ture: querying using uin, false: querying using nickname/cardname
# return: true/false
function _if_in_group () {

	[[ -z $3 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	(grep -q 'true' <<< "$(jq 'foreach .mems [] as $item (.;
		if '$3'
			then $item .uin | tostring == "'$2'"
			else $item .card == "'$2'" or $item .nick == "'$2'"
		end
	)' < $savedir/groups/$1.json)") && echo "true" || echo "false"

}

# _get_group_name: get group's name by group ID (internal)
# param:  $1: group ID
# return: group name if exist
function _get_group_name () {
	
	[[ -z $1 ]] && return 1
	for type in join create manage
	do
		jq 'foreach .'$type' [] as $item (.;
			if $item .gc == '$1'
				then $item .gn
				else empty
			end
		)' < $savedir/groups.json
	done | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
	
}

# _get_group_point: get user's level point from a given group (internal)
# param:  $1: group
#         $2: uin
# return: point if exist
function _get_group_point () {

	[[ -z $2 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	jq 'foreach .mems [] as $item (.;
		if $item .uin == '$2'
			then $item .lv .point
			else empty
		end
	)' < $savedir/groups/$1.json

}

# favorite_groups: get user's favorite groups ranking. (according to in-group level score.)
# param:  $1: uin
# return: list of groups.
function favorite_groups () {

	groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"

	temp="$(mktemp)"
	count=0

	for group in $groups
	do
		 $(_if_in_group $group $1 true) && echo "$(_get_group_point $group $1)	$group" >> $temp
	done

	printf "%-4s %-13s %-7s %-30s\n" "#" "Group ID" "Points" "Group Name"
	printf "%-4s %-13s %-7s %-30s\n" "---" "------------" "------" "-----------------------------"

	sort -nr $temp | while read -r item
	do
		let count++
		gid="$(cut -f2 <<< "$item")"
		printf "%-4s %-13s %-7s %-30s\n" "$count" "$gid" "$(cut -f1 <<< "$item")" "$(_get_group_name $gid)"
		
	done 

}

# get_uin: search for a user's uin form groups by name
# param:  $1: Username/Card name
# return: list of uin(s) if found, empty otherwise
function get_uin () {

	[[ -z $1 ]] && echo "usage: get_uin <cardname|nickname>" && return 1

	groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"
	for group in $groups
	do
		_get_uin_from_group "$group" "$1"
	done

	return 0
}

# get_joined: list joined groups of a user
# param:  $1: query type (uin/nickname)
#         $2: target
# return: list of joined groups
function get_joined () {
	[[ -z $2 ]] && echo "usage: get_joined <type> <target>, where type can be uin or nickname."
	case $1 in
		"uin") _arg=true;;
		"nickname") _arg=false;;
		*) echo "unknow type $1"; return 1;;
	esac

	        groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"

	printf "%-4s %-13s %-30s\n" "#" "Group ID" "Group Name"
	printf "%-4s %-13s %-30s\n" "---" "------------" "-----------------------------"

	count=0

	for group in $groups
	do
		$(_if_in_group $group $2 $_arg) && {
			let count++
			printf "%-4s %-13s %-30s\n" "$count" "$group" "$(_get_group_name $group)"
		}
	done

	return 0
}

# common_members: get common members in 2 groups
# param:  $1: group 1
#         $2: group 2
# return: list of members, with their name in group.
function common_members () {
	
	[[ -z $2 ]] && echo "usage: common_members <gc1> <gc2>" && return 1
	[[ ! -e $savedir/groups/$1.json || \
	   ! -e $savedir/groups/$2.json ]] && echo "group(s) does not exist."

	# get all members in given groups.
	members="$(jq '.mems [] .uin' < $savedir/groups/$1.json)
$(jq '.mems [] .uin' < $savedir/groups/$2.json)"

	printf "%-4s %-13s %-30s\n" "#" "QQ ID" "Name"
	printf "%-4s %-13s %-30s\n" "---" "------------" "-----------------------------"

	count=0

	# sort them, and get the duplicated members, then print them.
	sort <<< "$members" | uniq -d | while read -r uin
	do
		let count++
		printf "%-4s %-13s %-30s\n" "$count" "$uin" "$(_get_name_from_group $1 $uin true)"
	done

	return 0

}

[[ ! -z $* ]] && $* || cat << HELP
usage: $0 <command> <args> [args...]

COMMANDS:
  common_members <a> <b> : show common members in group <a> & <b>, where <a> &
                           <b> are group ID.
  favorite_groups <uin>  : show level point rank of groups for user <uin>, 
                           where <uin> is user ID.
  get_joined <uin>       : show joined groups for <uin> where <uin> is user ID.
  get_uin <nick/card>    : get user's ID by it's nickname or group card name, 
                           where <nick/card> is user's nick or card name.

ADVANCE COMMANDS:
  _get_group_name <gid>
  _get_group_point <gid> <uin>
  _get_name_from_group <gid> <uin> <card?>
  _get_uin_from_group <gid> <uin>
  _if_in_group <gid> <nick/card/uin> <uin?>
HELP
