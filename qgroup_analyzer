#!/usr/bin/env bash

savedir="save"

[[ ! -e save || ! -e save/groups ]] && echo "no saved data. Do qgroup_info_dump first." && exit 1

# _count_joined_of_user: count number of joined groups of a user. (internal)
# param:  $1: uin
# return: number of joined groups
function _count_joined_of_user () {

	[[ -z $1 ]] && return 1

	#groups="
#$(jq '.join [] .gc' < save/groups.json)
#$(jq '.create [] .gc' < save/groups.json)
#$(jq '.manage [] .gc' < save/groups.json)"

	#let count=0

	#for group in $groups
	#do
	#	$(_if_in_group $group $1 true) && let count++
	#done

	#echo $count

	# bad implement. but way more faster.
	egrep -lir "$1" $savedir/groups | wc -l

}

# _is_friend: test if a uin is friend
# param:  $1: uin
# return: true/false
function _is_friend () {
	[[ -z $1 ]] && return 1
	(grep -qE "^$1$" <<< "$(_get_friends)") && echo "true" || echo "false"
}

# _get_all_known: list ALL know users, from group, friends, etc.
# param:  none
# return: list of uin
function _get_all_known () {
	sort <<< "$(cat $savedir/groups/*.json | jq '.mems [] .uin')
$(_get_friends)" | uniq 
}

# _get_all_known_non_friend: list ALL know users that are not friend
# param:  none
# return: list of uin
function _get_all_known_non_friend () {
	sort <<< "$(_get_all_known)
$(_get_friends)" | uniq -u
}

# _count_friends_in_group: count number of friends in group (internal)
# param:  $1: gid
# return: number of friends
function _count_friends_in_group () {

	[[ -z $1 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2 
	num="$(sort <<< "$(jq '.mems [] .uin' < $savedir/groups/$1.json)
$(_get_friends)" | uniq -d | wc -l | tr -d '\t ')"
	echo $(($num - 1))

}

# _get_friends: get list of friend's uin (internal)
# param:  no
# return: list of friends uin
function _get_friends () {
	jq 'foreach .result [] as $item (.; $item .mems [] .uin)' < $savedir/friends.json
}

# _get_friend_name: get a friend's nickname (internal)
# param:  $1: uin
# return: friend's nickname if exist
function _get_friend_name () {

	[[ -z $1 ]] && return 1

	jq 'foreach .result [] as $item (.; $item .mems []) | foreach . as $item (.; 
		if $item .uin == '$1'
			then $item .name
			else empty
		end
	)' < $savedir/friends.json | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
}


# _get_name_from_group: fetch user's name from group (internal)
# param:  $1: group
#         $2: uin
#         $3: boolean, true: print card name if possible, nick name otherwise, false: always print nick name.
# return: group card name if exist, nickname otherwise, empty if that member is not in group.
function _get_name_from_group () {

	[[ -z $3 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	jq 'foreach .mems [] as $item (.; 
		if $item .uin == '$2' 
			then if $item .card != "" and '$3' 
				then $item .card 
				else $item .nick 
			end 
			else empty 
		end
	)' < $savedir/groups/$1.json | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
}

# _get_uin_from_group: fetch user's uin from group (internal)
# param:  $1: group
#         $2: uick/card name
# return: list of uins if exist, empty otherwise.
function _get_uin_from_group () {
	
	[[ -z $2 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2
	
	jq 'foreach .mems [] as $item (.; 
		if $item .card == "'$2'" or $item .nick == "'$2'"
			then $item .uin
			else empty
		end
	)' < $savedir/groups/$1.json
	
}

# _get_name: get name(s) by uin
# param:  $1: uin
# return: list of names if exist
function _get_name () {
	cat $savedir/groups/*.json | jq 'foreach .mems [] as $item(.; if $item .uin == '$1' then $item .nick else empty end)' | head -n1 | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
}

# _if_in_group: check if given uin/username is in a group (internal)
# param:  $1: group 
#         $2: username/uin
#         $3: boolean, ture: querying using uin, false: querying using nickname/cardname
# return: true/false
function _if_in_group () {

	[[ -z $3 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	#(grep -q 'true' <<< "$(jq 'foreach .mems [] as $item (.;
	#	if '$3'
	#		then $item .uin | tostring == "'$2'"
	#		else $item .card == "'$2'" or $item .nick == "'$2'"
	#	end
	#)' < $savedir/groups/$1.json)") && echo "true" || echo "false"

	# bad way, but much faster.
	case $3 in
		"true") (grep -q '"uin":'$2'}') && echo "true" || echo "false";;
		*) (grep -qE '"nick":"'$2'"|"card":"'$2'"') && echo "true" || echo "false";;
	esac < $savedir/groups/$1.json

}

# _get_group_name: get group's name by group ID (internal)
# param:  $1: group ID
# return: group name if exist
function _get_group_name () {
	
	[[ -z $1 ]] && return 1
	for type in join create manage
	do
		jq 'foreach .'$type' [] as $item (.;
			if $item .gc == '$1'
				then $item .gn
				else empty
			end
		)' < $savedir/groups.json
	done | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;'
	
}

# _get_group_point: get user's level point from a given group (internal)
# param:  $1: group
#         $2: uin
# return: point if exist
function _get_group_point () {

	[[ -z $2 ]] && return 1
	[[ ! -e $savedir/groups/$1.json ]] && return 2

	jq 'foreach .mems [] as $item (.;
		if $item .uin == '$2'
			then $item .lv .point
			else empty
		end
	)' < $savedir/groups/$1.json

}

# favorite_groups: get user's favorite groups ranking. (according to in-group level score.)
# param:  $1: uin
# return: list of groups.
function favorite_groups () {

	groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"

	temp="$(mktemp)"
	count=0

	for group in $groups
	do
		 $(_if_in_group $group $1 true) && echo "$(_get_group_point $group $1)	$group" >> $temp
	done

	printf "%-4s %-13s %-7s %-30s\n" "#" "Group ID" "Points" "Group Name"
	printf "%-4s %-13s %-7s %-30s\n" "---" "------------" "------" "-----------------------------"

	sort -nr $temp | while read -r item
	do
		let count++
		gid="$(cut -f2 <<< "$item")"
		printf "%-4s %-13s %-7s %-30s\n" "$count" "$gid" "$(cut -f1 <<< "$item")" "$(_get_group_name $gid)"
		
	done 

	rm $temp
}

# popular_groups: show the groups that have most friends in it.
# param:  none
# return: list of groups, order by # of friends inside.
function popular_groups () {

	groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"
	
	temp="$(mktemp)"
	count=0
	
	for group in $groups
	do
		echo "$(_count_friends_in_group $group)	$group" >> $temp
	done

	printf "%-4s %-13s %-13s %-30s\n" "#" "Group ID" "# of friends" "Group Name"
	printf "%-4s %-13s %-13s %-30s\n" "---" "------------" "------------" "-----------------------------"

	sort -nr $temp | while read -r item
	do
		let count++
		gid="$(cut -f2 <<< "$item")"
		printf "%-4s %-13s %-13s %-30s\n" "$count" "$gid" "$(cut -f1 <<< "$item")" "$(_get_group_name $gid)"
	done

	rm $temp

}

# potential_friends: find users with greater # of common groups but not friend
# param:  $1: threshold
# return: list of users
function potential_friends () {
	
	[[ -z $1 ]] && echo "usage: potential_friends <n>" && return 1
	
	uins="$(_get_all_known_non_friend)"
	uins_count="$(wc -l <<< "$uins" | tr -d '\t ')"
	
	[[ $uins_count -gt 2000 ]] && echo "There are $uins_count users to process. This gonna takes a while."

	temp="$(mktemp)"
	count=0
	_count=0

	while read -r uin
	do
		let _count++
		((_count%100)) || echo "$_count users done."
		common="$(_count_joined_of_user $uin)"
		[[ $common -gt $1 ]] && echo "$common	$uin" >> $temp
	done <<< "$uins"

	printf "%-4s %-13s %-13s %-30s\n" "#" "QQ ID" "# of common" "Username"
	printf "%-4s %-13s %-13s %-30s\n" "---" "------------" "------------" "-----------------------------"

	sort -nr $temp | while read -r item
	do
		let count++
		uin="$(cut -f2 <<< "$item")"
		printf "%-4s %-13s %-13s %-30s\n" "$count" "$uin" "$(cut -f1 <<< "$item")" "$(_get_name $uin)"
	done

	rm $temp

}

# friends_common: rank firends with number of common groups.
# param:  none
# return: list of friends
function friends_common () {

	temp="$(mktemp)"
	count=0

	uins="$(_get_friends)"
	uins_count="$(wc -l <<< "$uins" | tr -d '\t ')"
	_count=0

	[[ $uins_count -gt 2000 ]] && echo "There are $uins_count users to process. This gonna takes a while."

	while read -r uin
	do
		let _count++
		((_count%100)) || echo "$_count users done."
		echo "$(_count_joined_of_user $uin)	$uin" >> $temp
	done <<< "$uins"

	printf "%-4s %-13s %-13s %-30s\n" "#" "QQ ID" "# of common" "Username"
	printf "%-4s %-13s %-13s %-30s\n" "---" "------------" "------------" "-----------------------------"

	sort -nr $temp | while read -r item
	do
		let count++
		uin="$(cut -f2 <<< "$item")"
		printf "%-4s %-13s %-13s %-30s\n" "$count" "$uin" "$(cut -f1 <<< "$item")" "$(_get_friend_name $uin)"
	done

	rm $temp

}

# get_uin: search for a user's uin form groups by name
# param:  $1: Username/Card name
# return: list of uin(s) if found, empty otherwise
function get_uin () {

	[[ -z $1 ]] && echo "usage: get_uin <cardname|nickname>" && return 1

	groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"
	for group in $groups
	do
		_get_uin_from_group "$group" "$1"
	done

	return 0
}

# get_joined: list joined groups of a user
# param:  $1: query type (uin/nickname)
#         $2: target
# return: list of joined groups
function get_joined () {
	[[ -z $2 ]] && echo "usage: get_joined <type> <target>, where type can be uin or nickname."
	case $1 in
		"uin") _arg=true;;
		"nickname") _arg=false;;
		*) echo "unknow type $1"; return 1;;
	esac

	        groups="
$(jq '.join [] .gc' < save/groups.json)
$(jq '.create [] .gc' < save/groups.json)
$(jq '.manage [] .gc' < save/groups.json)"

	printf "%-4s %-13s %-30s\n" "#" "Group ID" "Group Name"
	printf "%-4s %-13s %-30s\n" "---" "------------" "-----------------------------"

	count=0

	for group in $groups
	do
		$(_if_in_group $group $2 $_arg) && {
			let count++
			printf "%-4s %-13s %-30s\n" "$count" "$group" "$(_get_group_name $group)"
		}
	done

	return 0
}

# joined_of_group: list joined groups for all groups member in given group.
# param:  $1: group
# return: joined groups, except given one.
function joined_of_group () {
	[[ -z $1 ]] && echo "usage: joined_of_group <gid>" && return 1
	[[ ! -e $savedir/groups/$1.json ]] && echo "group(s) does not exist."

	jq '.mems [] .uin' < $savedir/groups/$1.json | while read -r uin
	do
		echo "User: $uin ($(_get_name_from_group $1 $uin true)/$(_get_name_from_group $1 $uin false))"
		get_joined uin $uin; echo
	done
}

# joined_of_firends: list joined groups for all friends.
# param:  no
# return: list of joined groups of friends
function joined_of_firends () {

	_get_friends | while read -r uin
	do
		echo "User: $uin ($(_get_friend_name $uin))"
		get_joined uin $uin; echo
	done

}

# friends_in_group: list friends in given group
# param:  $1: gid
# return: friends in group
function friends_in_group () {
	[[ -z $1 ]] && echo "usage: friends_in_group <gid>" && return 1
	[[ ! -e $savedir/groups/$1.json ]] && echo "group(s) does not exist."
	users="$(jq '.mems [] .uin' < $savedir/groups/$1.json)
$(_get_friends)"
	
	printf "%-4s %-13s %-30s\n" "#" "QQ ID" "Name"
	printf "%-4s %-13s %-30s\n" "---" "------------" "-----------------------------"
	
	count=0
	
	sort <<< "$users" | uniq -d | while read -r uin
	do
		let count++
		printf "%-4s %-13s %-30s\n" "$count" "$uin" "$(_get_name_from_group $1 $uin true)"
	done
}

# common_members: get common members in 2 groups
# param:  $1: group 1
#         $2: group 2
# return: list of members, with their name in group.
function common_members () {
	
	[[ -z $2 ]] && echo "usage: common_members <gc1> <gc2>" && return 1
	[[ ! -e $savedir/groups/$1.json || \
	   ! -e $savedir/groups/$2.json ]] && echo "group(s) does not exist."

	# get all members in given groups.
	members="$(jq '.mems [] .uin' < $savedir/groups/$1.json)
$(jq '.mems [] .uin' < $savedir/groups/$2.json)"

	printf "%-4s %-13s %-30s\n" "#" "QQ ID" "Name"
	printf "%-4s %-13s %-30s\n" "---" "------------" "-----------------------------"

	count=0

	# sort them, and get the duplicated members, then print them.
	sort <<< "$members" | uniq -d | while read -r uin
	do
		let count++
		printf "%-4s %-13s %-30s\n" "$count" "$uin" "$(_get_name_from_group $1 $uin true)"
	done

	return 0

}

# get_all_names: get all names use by given user
# param:  $1: uin
# return: list of names
function get_all_names () {

	[[ -z $1 ]] && echo "usage: get_all_names <uin>" && return 1

	nick="$(cat $savedir/groups/*.json | jq 'foreach .mems [] as $item(.; if $item .uin == '$1' then $item .nick else empty end)')"
	cards="$(cat $savedir/groups/*.json | jq 'foreach .mems [] as $item(.; if $item .uin == '$1' then $item .card else empty end)')"
	echo "$nick
$cards" | sed -e 's/"$//; s/^"//; s/&nbsp;/ /g;' | sort -r | uniq

}

# prolog_export: export info to prolog.
# param:  $1: output file
#         $2: own uin
# return: none
function prolog_export () {
	
	[[ -z $2 ]] && echo "usage: prolog_export <output_file> <own_uin>" && return 1
	[[ -e $1 ]] && echo "$1 already exist." && return 3

	# export friends.

	_get_friends | while read -r uin
	do
		echo "friend($2,$uin)." >> "$1"
		echo "friend($uin,$2)." >> "$1"
	done

	# export groups.
	
	for group in $(jq '.join [] .gc' < save/groups.json) $(jq '.create [] .gc' < save/groups.json) $(jq '.manage [] .gc' < save/groups.json)
	do
		jq '.mems [] .uin' < $savedir/groups/$group.json | while read -r uin
		do
			echo "member($uin,$group)." >> "$1"
		done
	done

	echo "done. $(wc -l < "$1" | tr -d '\t ') lines written."
	echo "We have: member(uin, gid), and friend($2, uin)."
	echo 
	echo "For example, to find out groups that has your friend inside, do:"
	echo "?- member(X,Y),friend($2,X)."
	echo "X = a_uin_of_friend, "
	echo "Y = a_group_ID ;"
	echo "X = ...,"
	echo "Y = ... ;"
	echo "..."
	echo 
	echo "To found all groups member's relation: "
	echo "?- member(X,Y),member(X,Z),not(Z==Y),not(X==$2)."
	echo "X = a_uin_of_group_member, "
	echo "Y = a_gid_that_uin_joined, "
	echo "Z = another_gid_that_uin_joined ;"
	echo "X = ..., "
	echo "Y = ..., "
	echo "Z = ... ;"
	echo "..."

}

# wolfram_graph: generate a wolfram graph for showing relationship.
# param:  $1: output file
#         optional: $2: limit source gid to $2
#         require if $2 present: $3: own uid
# return: GraphPlot[...]
function wolfram_graph () {

	[[ -z $1 ]] && echo "usage: wolfram_graph <output> [src_gid <own_uin>]" && return 1
	[[ -e $1 ]] && echo "$1 already exist." && return 3
	[[ ! -z $2 && ! -e $savedir/groups/$2.json ]] && echo "group does not exist." && return 2 
	[[ ! -z $2 && -z $3 ]] && echo "usage: wolfram_graph <output> [src_gid <own_uin>]" && return 1 
	[[ ! -z $2 ]] && m="$(jq '.mems [] .uin' < $savedir/groups/$2.json)"

	temp_dir="$(mktemp -d)"
	node_tmp="$(mktemp)"

	{
		echo -n "GraphPlot[{"

		for group in $(jq '.join [] .gc' < save/groups.json) $(jq '.create [] .gc' < save/groups.json) $(jq '.manage [] .gc' < save/groups.json)
		do
			gname="$(_get_group_name $group)"
			infos="$(jq '.mems [] .nick, .mems [] .uin' < $savedir/groups/$group.json)"
			echo -n "graphing $group ($gname)... " >&2
			_c_infos="$(($(wc -l <<< "$infos")/2))"
			count=$_c_infos
			head -n$_c_infos <<< "$infos" | sed -e 's/"$//; s/^"//; s/&nbsp;/_/g; s/ /_/g;' | while read -r uname
			do
				mapfile -s$count -n1 uin <<< "$infos"
				let count++
				[[ $IGNORES == *"$uin"* ]] && echo -n "ignored $uin... " >&2 && continue 
				[[ ! -z $2 ]] && {
					[[ $uin == $3 ]] && continue
					[[ $m == *"$uin"* ]] || continue
				}
				echo "\"$uname\" -> \"$gname\", " >> $temp_dir/$uin
				echo "$uin" >> $node_tmp
			done
			echo "done" >&2
		done 

		echo -n "generating... " >&2

		for f in $(sort $node_tmp | uniq -d)
		do
			cat $temp_dir/$f
		done | tr -d '\n' | sed -e 's/, $//;'

		echo -n "}, VertexLabeling -> True]"

		rm -r $temp_dir $node_tmp

		echo "done" >&2

	} | tr -d '\n' > "$1"
}

[[ ! -z $* ]] && $* || cat << HELP
usage: $0 <command> <args> [args...]

COMMANDS:
  common_members <a> <b> : show common members in group <a> & <b>, where <a> &
                           <b> are group ID.
  favorite_groups <uin>  : show level point rank of groups for user <uin>, 
                           where <uin> is user ID.
  friends_common         : rank friends with # of common groups.
  friends_in_group <gid> : list friends in <gid>, where <gid> is group ID.
  get_all_names <uin>    : get all names use by <uin>, where <uin> is user ID.
  get_joined <uin>       : show joined groups for <uin> where <uin> is user ID.
  get_uin <nick/card>    : get user's ID by it's nickname or group card name, 
                           where <nick/card> is user's nick or card name.
  joined_of_group <gid>  : list joined groups for all groups members in a given
                           <gid>, where <gid> is group ID.
  joined_of_firends      : list joined groups for all friends.
  popular_groups         : rank groups by number of friends in it.
  potential_friends <n>  : list known users that are not friend, but has more
                           than <n> common groups with you.
  prolog_export <o> <u>  : export friends, groups to prolog, where <o> is
                           output file, <u> is your user ID.
  wolfram_graph <o> [s]  : generate a wolfram GraphPlot. Where <o> is output
                           file, [s] is optional arg to limit source gid.
                           You can also pass an environment variable IGNORES, 
                           to specify uin(s) to ignore. Separate uins with 
                           whitespace.

ADVANCE COMMANDS:
  _count_friends_in_group <gid>
  _count_joined_of_user <uin>
  _get_all_known
  _get_all_known_non_friend
  _get_friend_name <uin>
  _get_friends
  _get_group_name <gid>
  _get_group_point <gid> <uin>
  _get_name <uin>
  _get_name_from_group <gid> <uin> <card?>
  _get_uin_from_group <gid> <nick/card>
  _if_in_group <gid> <nick/card/uin> <uin?>
  _is_friend <uin>
HELP
